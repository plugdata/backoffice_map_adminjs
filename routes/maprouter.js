// /routes/apimap.js
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡πÅ‡∏•‡∏∞ BuildingControl

import express from 'express'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()
const router = express.Router()

// ========================================
// üìç GET /api/map - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// ========================================
router.get('/map', async (req, res) => {
  try {
    const maps = await prisma.map.findMany({
      include: {
        buildingControl: {
          select: {
            id: true,
            building_type: true,
            use_purpose: true,
            license_number: true,
            status: true,
          }
        }
      }
    })

    res.json({
      success: true,
      data: maps,
      message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    })
  } catch (error) {
    console.error('Error fetching maps:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map',
      error: error.message
    })
  }
})

// ========================================
// üìç GET /api/map/:id - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡∏ï‡∏≤‡∏° ID
// ========================================
router.get('/map/:id', async (req, res) => {
  try {
    const { id } = req.params
    const map = await prisma.map.findUnique({
      where: { id: parseInt(id) },
      include: {
        buildingControl: {
          select: {
            id: true,
            building_type: true,
            use_purpose: true,
            license_number: true,
            status: true,
            owner: {
              select: {
                id: true,
                first_name: true,
                last_name: true,
              }
            },
            fiscalYear: {
              select: {
                id: true,
                year: true,
              }
            }
          }
        }
      }
    })

    if (!map) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map'
      })
    }

    res.json({
      success: true,
      data: map,
      message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    })
  } catch (error) {
    console.error('Error fetching map:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map',
      error: error.message
    })
  }
})

// ========================================
// üìç POST /api/map - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡πÉ‡∏´‡∏°‡πà
// ========================================
router.post('/map', async (req, res) => {
  try {
    const { 
      latitude, 
      longitude, 
      name_local, 
      buildingControlId 
    } = req.body

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!latitude || !longitude || !buildingControlId) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• latitude, longitude ‡πÅ‡∏•‡∏∞ buildingControlId'
      })
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ BuildingControl ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const buildingControl = await prisma.buildingControl.findUnique({
      where: { id: parseInt(buildingControlId) }
    })

    if (!buildingControl) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BuildingControl'
      })
    }

    const newMap = await prisma.map.create({
      data: {
        latitude: parseFloat(latitude),
        longitude: parseFloat(longitude),
        name_local: name_local || null,
        buildingControlId: parseInt(buildingControlId)
      },
      include: {
        buildingControl: {
          select: {
            id: true,
            building_type: true,
            use_purpose: true,
            license_number: true,
            status: true,
          }
        }
      }
    })

    res.status(201).json({
      success: true,
      data: newMap,
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    })
  } catch (error) {
    console.error('Error creating map:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map',
      error: error.message
    })
  }
})

// ========================================
// üìç PUT /api/map/:id - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map
// ========================================
router.put('/map/:id', async (req, res) => {
  try {
    const { id } = req.params
    const { 
      latitude, 
      longitude, 
      name_local, 
      buildingControlId 
    } = req.body

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Map ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const existingMap = await prisma.map.findUnique({
      where: { id: parseInt(id) }
    })

    if (!existingMap) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map'
      })
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ BuildingControl ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
    if (buildingControlId) {
      const buildingControl = await prisma.buildingControl.findUnique({
        where: { id: parseInt(buildingControlId) }
      })

      if (!buildingControl) {
        return res.status(404).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BuildingControl'
        })
      }
    }

    const updatedMap = await prisma.map.update({
      where: { id: parseInt(id) },
      data: {
        ...(latitude && { latitude: parseFloat(latitude) }),
        ...(longitude && { longitude: parseFloat(longitude) }),
        ...(name_local !== undefined && { name_local }),
        ...(buildingControlId && { buildingControlId: parseInt(buildingControlId) })
      },
      include: {
        buildingControl: {
          select: {
            id: true,
            building_type: true,
            use_purpose: true,
            license_number: true,
            status: true,
          }
        }
      }
    })

    res.json({
      success: true,
      data: updatedMap,
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    })
  } catch (error) {
    console.error('Error updating map:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map',
      error: error.message
    })
  }
})

// ========================================
// üìç DELETE /api/map/:id - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map
// ========================================
router.delete('/map/:id', async (req, res) => {
  try {
    const { id } = req.params

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Map ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const existingMap = await prisma.map.findUnique({
      where: { id: parseInt(id) }
    })

    if (!existingMap) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map'
      })
    }

    await prisma.map.delete({
      where: { id: parseInt(id) }
    })

    res.json({
      success: true,
      message: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    })
  } catch (error) {
    console.error('Error deleting map:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map',
      error: error.message
    })
  }
})

// ========================================
// üìç GET /api/map/building/:buildingControlId - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡∏ï‡∏≤‡∏° BuildingControl
// ========================================
router.get('/map/building/:buildingControlId', async (req, res) => {
  try {
    const { buildingControlId } = req.params

    const maps = await prisma.map.findMany({
      where: { buildingControlId: parseInt(buildingControlId) },
      include: {
        buildingControl: {
          select: {
            id: true,
            building_type: true,
            use_purpose: true,
            license_number: true,
            status: true,
          }
        }
      }
    })

    res.json({
      success: true,
      data: maps,
      message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡∏ï‡∏≤‡∏° BuildingControl ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    })
  } catch (error) {
    console.error('Error fetching maps by building:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map',
      error: error.message
    })
  }
})

export default router
