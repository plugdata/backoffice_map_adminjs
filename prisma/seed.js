import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import { faker } from '@faker-js/faker'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting database seeding...')

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö dependency)
  // ‡πÉ‡∏ä‡πâ try-catch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  try {
    await prisma.map.deleteMany()
    console.log('üóëÔ∏è Cleaned Map data')
  } catch (error) {
    console.log('‚ö†Ô∏è Map table does not exist, skipping...')
  }

  try {
    await prisma.uploads.deleteMany()
    console.log('üóëÔ∏è Cleaned Uploads data')
  } catch (error) {
    console.log('‚ö†Ô∏è Uploads table does not exist, skipping...')
  }

  try {
    await prisma.buildingControl.deleteMany()
    console.log('üóëÔ∏è Cleaned BuildingControl data')
  } catch (error) {
    console.log('‚ö†Ô∏è BuildingControl table does not exist, skipping...')
  }

  try {
    await prisma.riskZone.deleteMany()
    console.log('üóëÔ∏è Cleaned RiskZone data')
  } catch (error) {
    console.log('‚ö†Ô∏è RiskZone table does not exist, skipping...')
  }

  try {
    await prisma.zoningPlan.deleteMany()
    console.log('üóëÔ∏è Cleaned ZoningPlan data')
  } catch (error) {
    console.log('‚ö†Ô∏è ZoningPlan table does not exist, skipping...')
  }

  try {
    await prisma.planProject.deleteMany()
    console.log('üóëÔ∏è Cleaned PlanProject data')
  } catch (error) {
    console.log('‚ö†Ô∏è PlanProject table does not exist, skipping...')
  }

  try {
    await prisma.approvedProject.deleteMany()
    console.log('üóëÔ∏è Cleaned ApprovedProject data')
  } catch (error) {
    console.log('‚ö†Ô∏è ApprovedProject table does not exist, skipping...')
  }

  try {
    await prisma.owner.deleteMany()
    console.log('üóëÔ∏è Cleaned Owner data')
  } catch (error) {
    console.log('‚ö†Ô∏è Owner table does not exist, skipping...')
  }

  try {
    await prisma.fiscalYear.deleteMany()
    console.log('üóëÔ∏è Cleaned FiscalYear data')
  } catch (error) {
    console.log('‚ö†Ô∏è FiscalYear table does not exist, skipping...')
  }

  try {
    await prisma.user.deleteMany()
    console.log('üóëÔ∏è Cleaned User data')
  } catch (error) {
    console.log('‚ö†Ô∏è User table does not exist, skipping...')
  }

  try {
    await prisma.workTopic.deleteMany()
    console.log('üóëÔ∏è Cleaned WorkTopic data')
  } catch (error) {
    console.log('‚ö†Ô∏è WorkTopic table does not exist, skipping...')
  }

  console.log('üóëÔ∏è Cleaned existing data')

  // Users
  let admin, officer, viewer, testAdmin
  try {
    // Test admin user with password "12345"
    testAdmin = await prisma.user.create({
      data: {
        username: 'admin',
        password: await bcrypt.hash('12345', 10),
        title_use: '‡∏ô‡∏≤‡∏¢',
        fullName: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (‡∏ó‡∏î‡∏™‡∏≠‡∏ö)',
        email: 'admin@test.com',
        phone: '0811111111',
        role: 'admin',
        position: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        address: '123 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏≤‡∏ä‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø'
      }
    })

    admin = await prisma.user.create({
      data: {
        username: 'admin123',
        password: await bcrypt.hash('admin123', 10),
        title_use: '‡∏ô‡∏≤‡∏¢',
        fullName: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        email: 'admin@example.com',
        phone: '0811111111',
        role: 'admin',
        position: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        address: '123 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏≤‡∏ä‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø'
      }
    })

    officer = await prisma.user.create({
      data: {
        username: 'officer',
        password: await bcrypt.hash('officer123', 10),
        title_use: '‡∏ô‡∏≤‡∏á',
        fullName: '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏Ñ‡∏™‡∏ô‡∏≤‡∏°',
        email: 'officer@example.com',
        phone: '0822222222',
        role: 'officer',
        position: '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏Ñ‡∏™‡∏ô‡∏≤‡∏°',
        address: '456 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø'
      }
    })

    viewer = await prisma.user.create({
      data: {
        username: 'viewer',
        password: await bcrypt.hash('viewer123', 10),
        title_use: '‡∏ô‡∏≤‡∏¢',
        fullName: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        email: 'viewer@example.com',
        phone: '0833333333',
        role: 'viewer',
        position: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        address: '789 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏ä‡∏î‡∏≤‡∏†‡∏¥‡πÄ‡∏©‡∏Å ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø'
      }
    })

    console.log('‚úÖ Created users')
  } catch (error) {
    console.log('‚ùå Error creating users:', error.message)
    return
  }

  // FiscalYear
  const fy2567 = await prisma.fiscalYear.create({
    data: { year: 2567, detail: '‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2567' }
  })
  const fy2568 = await prisma.fiscalYear.create({
    data: { year: 2568, detail: '‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2568' }
  })
  const fy2569 = await prisma.fiscalYear.create({
    data: { year: 2569, detail: '‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2569' }
  })

  console.log('‚úÖ Created fiscal years')

  // Owners
  const owners = []
  for (let i = 0; i < 15; i++) {
    const owner = await prisma.owner.create({
      data: {
        title_owner: faker.helpers.arrayElement(['‡∏ô‡∏≤‡∏¢', '‡∏ô‡∏≤‡∏á', '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó']),
        first_name: faker.person.firstName(),
        last_name: faker.person.lastName(),
        phone: faker.phone.number('08########'),
        no_id: faker.string.numeric(9),
        road: faker.location.street(),
        subdistrict: faker.location.city(),
        district: faker.location.city(),
        province: faker.helpers.arrayElement(['‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏ï‡∏£‡∏±‡∏á', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤']),
        postcode: Number(faker.string.numeric(5)),
        user_id: i < 5 ? officer.id : null
      }
    })
    owners.push(owner)
  }

  console.log('‚úÖ Created owners')

  // BuildingControl
  const buildingControls = []
  for (let i = 0; i < 20; i++) {
    const bc = await prisma.buildingControl.create({
      data: {
        building_type: faker.helpers.arrayElement([
          '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå', '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢', '‡πÇ‡∏Å‡∏î‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
        ]),
        use_purpose: faker.helpers.arrayElement([
          '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢', '‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏ú‡∏•‡∏¥‡∏ï', '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'
        ]),
        license_number: `BC-${faker.string.alphanumeric({ length: 6, casing: 'upper' })}`,
        quantity: faker.number.int({ min: 1, max: 10 }),
        fiscalYearId: faker.helpers.arrayElement([fy2567.id, fy2568.id, fy2569.id]),
        owner_id: faker.helpers.arrayElement(owners).id,
        status: faker.helpers.arrayElement(['Draft', 'Pending', 'Approved', 'Rejected']),
        date: faker.date.past()
      }
    })
    buildingControls.push(bc)
  }

  console.log('‚úÖ Created building controls')

  // RiskZone
  const riskZones = []
  for (let i = 0; i < 10; i++) {
    const rz = await prisma.riskZone.create({
      data: {
        zoneType: faker.helpers.arrayElement(['‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°', '‡∏î‡∏¥‡∏ô‡∏ñ‡∏•‡πà‡∏°', '‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ', '‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏']),
        description: faker.lorem.sentence(),
        fiscalYearId: faker.helpers.arrayElement([fy2567.id, fy2568.id, fy2569.id]),
        owner_id: faker.helpers.arrayElement(owners).id
      }
    })
    riskZones.push(rz)
  }

  console.log('‚úÖ Created risk zones')

  // ZoningPlan
  const zoningPlans = []
  for (let i = 0; i < 15; i++) {
    const zp = await prisma.zoningPlan.create({
      data: {
        areaName: faker.helpers.arrayElement([
          '‡πÄ‡∏Ç‡∏ï‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡∏Å‡∏£‡∏£‡∏°', '‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢', '‡πÄ‡∏Ç‡∏ï‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°', '‡πÄ‡∏Ç‡∏ï‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏£‡∏°', '‡πÄ‡∏Ç‡∏ï‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå', '‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'
        ]),
        notes: faker.lorem.sentence(),
        fiscalYearId: faker.helpers.arrayElement([fy2567.id, fy2568.id, fy2569.id]),
        owner_id: faker.helpers.arrayElement(owners).id
      }
    })
    zoningPlans.push(zp)
  }

  console.log('‚úÖ Created zoning plans')

  // PlanProject
  const planProjects = []
  for (let i = 0; i < 8; i++) {
    const pp = await prisma.planProject.create({
      data: {
        code: `PP-${faker.string.alphanumeric({ length: 4, casing: 'upper' })}`,
        name: faker.company.name() + ' Project',
        category: faker.helpers.arrayElement(['Infrastructure', 'Education', 'Healthcare', 'Transportation']),
        startDate: faker.date.past(),
        endDate: faker.date.future(),
        supervisor: faker.person.fullName(),
        budget: faker.number.float({ min: 1000000, max: 10000000, fractionDigits: 2 }),
        fiscalYearId: faker.helpers.arrayElement([fy2567.id, fy2568.id, fy2569.id]),
        status: faker.helpers.arrayElement(['Planning', 'In Progress', 'Completed', 'Cancelled']),
        documentCount: faker.number.int({ min: 0, max: 20 }),
        details: faker.lorem.paragraph()
      }
    })
    planProjects.push(pp)
  }

  console.log('‚úÖ Created plan projects')

  // ApprovedProject
  const approvedProjects = []
  for (let i = 0; i < 6; i++) {
    const ap = await prisma.approvedProject.create({
      data: {
        title_project: faker.company.name() + ' Approved Project',
        category: faker.helpers.arrayElement(['Infrastructure', 'Education', 'Healthcare', 'Transportation']),
        supervisor: faker.person.fullName(),
        budget: faker.number.float({ min: 2000000, max: 15000000, fractionDigits: 2 }),
        fiscalYearId: faker.helpers.arrayElement([fy2567.id, fy2568.id, fy2569.id]),
        status: faker.helpers.arrayElement(['Approved', 'In Progress', 'Completed']),
        documentCount: faker.number.int({ min: 5, max: 30 }),
        details: faker.lorem.paragraph()
      }
    })
    approvedProjects.push(ap)
  }

  console.log('‚úÖ Created approved projects')

  // Helper: random coordinate roughly within Thailand bounds
  const randomThaiCoord = () => {
    const lat = faker.number.float({ min: 5.5, max: 20.5, fractionDigits: 6 })
    const lng = faker.number.float({ min: 97.5, max: 105.7, fractionDigits: 6 })
    return { lat, lng }
  }

  // Helper: make small square polygon around center
  const makeSquarePolygon = (lat, lng, delta = 0.01) => {
    const ring = [
      [lng - delta, lat - delta],
      [lng + delta, lat - delta],
      [lng + delta, lat + delta],
      [lng - delta, lat + delta],
      [lng - delta, lat - delta],
    ]
    return { type: 'FeatureCollection', features: [{ type: 'Feature', properties: {}, geometry: { type: 'Polygon', coordinates: [ring] } }] }
  }

  // Helper: make line string
  const makeLineString = (lat, lng, points = 5) => {
    const coordinates = []
    for (let i = 0; i < points; i++) {
      const offsetLat = lat + (Math.random() - 0.5) * 0.01
      const offsetLng = lng + (Math.random() - 0.5) * 0.01
      coordinates.push([offsetLng, offsetLat, 0])
    }
    return { type: 'FeatureCollection', features: [{ type: 'Feature', properties: { name: 'Feature 1', description: '' }, geometry: { type: 'LineString', coordinates } }] }
  }

  // Real data for Trang locations
  const realTrangData = [
    { name: "‡∏ô‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏¥‡∏°‡∏û‡∏• ‡∏à‡∏¥‡∏£‡∏∞‡∏ò‡∏≥‡∏£‡∏á", address: "43497", lat: 7.566557, lng: 99.62328, type: "‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô ‡∏°‡∏≤‡∏ï‡∏µ‡πÇ‡∏ï‡πâ" },
    { name: "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏î‡∏£‡∏∏‡πÇ‡∏ô‡∏ó‡∏±‡∏¢", address: "49", lat: 7.557393, lng: 99.61693, type: "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏î‡∏£‡∏∏‡πÇ‡∏ô‡∏ó‡∏±‡∏¢" },
    { name: "‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å‡∏ó‡∏ß‡∏µ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå", address: "387", lat: 7.540903, lng: 99.59839, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏ã‡∏±‡∏™‡πÇ‡∏Å‡πâ" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ö‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏õ‡∏≠‡πÄ‡∏£‡∏ä‡∏±‡πà‡∏ô ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)", address: "115/49", lat: 7.542985, lng: 99.61618, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡πÄ‡∏ä‡∏•‡∏•‡πå" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏õ‡∏ß‡πÄ‡∏£‡∏® ‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÄ‡∏î‡∏ä", address: "150/9", lat: 7.544791, lng: 99.61162, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ó‡∏µ‡πÄ‡∏ö‡∏¥‡∏£‡πå‡∏î ‡πÅ‡∏Å‡∏£‡∏ô‡∏î‡πå" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏®‡∏£‡∏µ‡∏ï‡∏£‡∏±‡∏á‡πÅ‡∏≠‡πÇ‡∏Å‡∏£ ‡∏≠‡∏¥‡∏ô‡∏î‡∏±‡∏™‡∏ó‡∏£‡∏µ ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)", address: "38365", lat: 7.545062, lng: 99.59544, type: "‡∏ï‡∏•‡∏≤‡∏î‡∏ä‡∏¥‡∏ô‡∏ï‡∏≤" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ö‡∏¥‡πä‡∏Å‡∏ã‡∏µ ‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)", address: "102/2", lat: 7.545333, lng: 99.61509, type: "‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£@‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏ï‡∏£‡∏±‡∏á‡∏ß‡∏¥‡∏£‡∏∏‡∏ì‡∏Å‡∏¥‡∏à‡∏Ç‡∏ô‡∏™‡πà‡∏á", address: "20/35", lat: 7.546957, lng: 99.5922, type: "‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô ‡∏°‡∏≤‡∏ï‡∏µ‡πÇ‡∏ï‡πâ" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡∏≠‡∏£‡∏∏‡πÇ‡∏ì‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå", address: "46/38", lat: 7.546983, lng: 99.60714, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏™‡πÄ‡∏ï‡∏ä‡∏±‡πà‡∏ô" },
    { name: "‡∏ô‡∏≤‡∏á‡πÄ‡∏Ç‡∏°‡∏¥‡∏Å‡∏≤ ‡∏Å‡∏µ‡∏£‡∏ï‡∏¥‡πÄ‡∏°‡∏ò‡∏≤‡∏Å‡∏∏‡∏•", address: "105/39", lat: 7.547587, lng: 99.61567, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÄ‡∏î‡∏≠‡∏∞‡∏£‡∏π‡∏°" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ô‡∏û‡∏ß‡∏á‡∏®‡πå ‡∏Ñ‡∏±‡∏ô‡∏â‡πà‡∏≠‡∏á", address: "105/275", lat: 7.547822, lng: 99.61757, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ó‡πå" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏≠‡∏™‡πÇ‡∏ã‡πà (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢) ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô) (ESSO)", address: "101/20", lat: 7.547995, lng: 99.61515, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏ö‡∏≤‡∏á‡∏à‡∏≤‡∏Å" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏™‡∏¢‡∏≤‡∏°‡∏°‡∏á‡∏Ñ‡∏• ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "255/15", lat: 7.548472, lng: 99.60559, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏û‡∏µ‡∏ó‡∏µ" },
    { name: "‡∏ô‡∏≤‡∏á‡∏≠‡∏†‡∏¥‡∏£‡∏î‡∏µ ‡πÅ‡∏Å‡πâ‡∏ß‡∏†‡∏±‡∏Å‡∏î‡∏µ", address: "206/48", lat: 7.548707, lng: 99.60969, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏®‡∏£‡∏µ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ò‡∏±‡∏ç‡∏û‡∏£‡πÇ‡∏Æ‡∏™‡πÄ‡∏ó‡∏•" },
    { name: "‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏ß‡∏¥‡πÄ‡∏®‡∏©‡∏Å‡∏∏‡∏•‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™", address: "98", lat: 7.549037, lng: 99.6142, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏ö‡∏≤‡∏á‡∏à‡∏≤‡∏Å" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏™‡∏£‡∏±‡∏ç‡∏û‡∏á‡∏®‡πå ‡∏™‡∏±‡∏ô‡∏ï‡∏¥‡∏Ñ‡∏∏‡∏ì‡∏≤‡∏ô‡∏∏‡∏†‡∏£‡∏ì‡πå", address: "105/345", lat: 7.549646, lng: 99.61937, type: "THE SECRET" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ä‡∏±‡∏¢‡∏ß‡∏¥‡∏ä‡∏¥‡∏ï ‡πÅ‡∏ã‡πà‡∏Æ‡∏±‡πà‡∏ô", address: "69", lat: 7.551126, lng: 99.61199, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏≠‡∏µ‡πÇ‡∏Ñ‡πà ‡∏≠‡∏¥‡∏ô‡∏ô‡πå" },
    { name: "‡∏ô‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏¥‡∏≠‡∏£ ‡πÅ‡∏Å‡πâ‡∏ß‡∏õ‡∏£‡∏∞‡∏™‡∏°‡∏®‡∏£‡∏µ", address: "73/99", lat: 7.551894, lng: 99.61789, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ó‡∏µ ‡πÅ‡∏≠‡∏ô‡∏î‡πå ‡∏ö‡∏µ ‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏°‡∏ô‡∏ó‡πå" },
    { name: "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ô‡∏§‡∏°‡∏• ‡∏ô‡∏¥‡∏õ‡∏Å‡∏∏‡∏•", address: "133/125", lat: 7.553032, lng: 99.61799, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏õ‡∏ï‡∏ó" },
    { name: "‡∏ô‡∏≤‡∏¢‡πÑ‡∏û‡πÇ‡∏£‡∏à‡∏ô‡πå ‡∏≠‡πà‡∏≤‡∏ß‡∏™‡∏Å‡∏∏‡∏•", address: "25/17-21", lat: 7.55322, lng: 99.60571, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡∏û‡∏¢‡πå ‡πÄ‡∏£‡∏™‡∏ã‡∏¥‡πÄ‡∏î‡∏ô‡∏ó‡πå" },
    { name: "‡∏ô‡∏≤‡∏¢‡πÄ‡∏î‡πà‡∏ô‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏®‡∏¥‡∏•‡∏≤‡∏ß‡∏±‡∏ä‡∏ô‡∏≤‡πÑ‡∏ô‡∏¢", address: "41/12", lat: 7.553405, lng: 99.61411, type: "Hang Out" },
    { name: "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ä‡∏ô‡∏≤‡∏à‡∏¥‡∏ï ‡∏™‡∏ô‡∏±‡πà‡∏ô‡∏ß‡∏≤‡∏ô‡∏¥‡∏ä", address: "64/214-215", lat: 7.55343, lng: 99.60841, type: "‡πÄ‡∏î‡∏≠‡∏∞‡∏Å‡∏•‡∏≤‡∏™‡πÄ‡∏Æ‡πâ‡∏≤‡∏™‡πå ‡πÄ‡∏û‡∏•‡∏™ The glass house place" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤ ‡∏®‡∏£‡∏µ‡∏ß‡∏á‡∏®‡πå", address: "39/33", lat: 7.553447, lng: 99.61455, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡πÄ‡∏≠‡∏™‡πÇ‡∏ã‡πà" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡∏≠‡∏£‡∏∏‡πÇ‡∏ì‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå", address: "25/89", lat: 7.553573, lng: 99.60508, type: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏®‡∏£‡∏µ‡∏ï‡∏£‡∏±‡∏á‡πÅ‡∏≠‡πÇ‡∏Å‡∏£ ‡∏≠‡∏¥‡∏ô‡∏î‡∏±‡∏™‡∏ó‡∏£‡∏µ ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)" },
    { name: "‡∏ô‡∏≤‡∏á‡∏û‡∏£‡∏ß‡∏¥‡∏°‡∏• ‡∏¢‡∏Å‡∏û‡∏¥‡∏ó‡∏±‡∏Å‡∏©‡πå", address: "147", lat: 7.553715, lng: 99.60628, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ï‡∏£‡∏±‡∏á‡∏Æ‡∏≠‡∏•‡∏¥‡πÄ‡∏î‡∏¢‡πå ‡πÇ‡∏Æ‡πÄ‡∏ï‡πá‡∏•" },
    { name: "‡∏ô‡∏≤‡∏¢‡πÑ‡∏û‡πÇ‡∏£‡∏à‡∏ô‡πå ‡∏≠‡πà‡∏≤‡∏ß‡∏™‡∏Å‡∏∏‡∏•", address: "25/28-31", lat: 7.553924, lng: 99.60493, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ö‡∏µ‡∏ö‡∏µ‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ä‡∏∏‡∏î ‡∏ï‡∏£‡∏±‡∏á‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°", address: "118/8", lat: 7.554067, lng: 99.59849, type: "‡∏ö‡∏¥‡πä‡∏Å‡∏ã‡∏µ ‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ä‡∏ô‡∏≤‡∏à‡∏¥‡∏ï ‡∏™‡∏ô‡∏±‡πà‡∏ô‡∏ß‡∏≤‡∏ô‡∏¥‡∏ä", address: "27", lat: 7.554533, lng: 99.60531, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÑ‡∏°‡∏ï‡∏£‡∏µ‡πÄ‡∏Æ‡πâ‡∏≤‡∏™‡πå" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏™‡∏ß‡∏£ ‡∏û‡∏¥‡∏®‡∏≤‡∏ö‡∏î‡∏¥‡∏ô‡∏ó‡∏£‡πå", address: "24", lat: 7.554792, lng: 99.60505, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÄ‡∏°‡∏ã‡∏≠‡∏á ‡πÄ‡∏î‡∏≠ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ß‡∏±‡∏í‡∏ô‡πå ‡∏ó‡∏±‡∏ö‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á", address: "45510", lat: 7.554933, lng: 99.60519, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏î‡∏µ‡∏î‡∏µ ‡πÄ‡∏£‡∏™‡∏ã‡∏¥‡πÄ‡∏î‡πâ‡∏ô‡∏ó‡πå" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "99", lat: 7.555172, lng: 99.6056, type: "‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏£‡∏ö‡∏¥‡∏ô‡∏™‡∏±‡∏ô ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ï‡∏£‡∏±‡∏á‡∏Æ‡∏≠‡∏•‡∏¥‡πÄ‡∏î‡∏¢‡πå‡πÇ‡∏Æ‡πÄ‡∏ï‡πá‡∏• ‡πÇ‡∏î‡∏¢ ‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏û‡∏• ‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡∏ß‡∏¥‡∏ä‡∏±‡∏¢", address: "37654", lat: 7.555267, lng: 99.61054, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÄ‡∏å‡∏≠‡πÅ‡∏ï‡∏°" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï ‡∏û‡∏¥‡∏ó‡∏¢‡∏≤‡∏û‡∏¥‡∏®‡∏≤‡∏•", address: "160/28", lat: 7.555367, lng: 99.60352, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ä‡∏°‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡πå ‡πÅ‡∏Å‡πâ‡∏ß‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå", address: "23/36", lat: 7.555386, lng: 99.61483, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÑ‡∏£‡∏ß‡∏¥‡∏ô‡∏ó‡∏£‡πå ‡πÄ‡∏û‡∏•‡∏™" },
    { name: "‡∏ô‡∏≤‡∏á‡∏à‡∏¥‡∏£‡∏≤‡∏†‡∏≤ ‡πÄ‡∏õ‡∏µ‡πà‡∏¢‡∏°‡∏û‡∏£‡∏¥‡πâ‡∏á", address: "23", lat: 7.5556, lng: 99.60683, type: "‡∏Å‡∏≤‡∏£‡πå‡πÄ‡∏î‡πâ‡∏ô‡∏ó‡πå ‡∏Æ‡∏¥‡∏•‡∏•‡πå ‡πÅ‡∏°‡∏ô‡∏ä‡∏±‡πà‡∏ô ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πå‡πÄ‡∏î‡πâ‡∏ô‡∏ó‡πå ‡∏Æ‡∏¥‡∏•‡∏•‡πå ‡πÇ‡∏Æ‡πÄ‡∏ï‡πá‡∏•" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ò‡∏ô‡∏ß‡∏±‡∏™‡∏™‡πå ‡πÄ‡∏≠‡∏Å‡∏ò‡∏ô‡∏Å‡∏£", address: "68/59", lat: 7.555925, lng: 99.62589, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ô‡∏±‡∏ô‡∏ó‡∏µ" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏™‡πÄ‡∏ï‡∏ä‡∏±‡πà‡∏ô ‡∏†‡∏û‡∏ò‡∏£‡∏£‡∏°‡∏ß‡∏á‡∏®‡πå ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "118", lat: 7.55602, lng: 99.60453, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏ö‡∏≤‡∏¢" },
    { name: "‡∏ô‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡πå ‡∏•‡∏µ‡∏•‡∏≤‡πÄ‡∏•‡∏¥‡∏®‡πÅ‡∏•‡πâ‡∏ß", address: "31", lat: 7.556029, lng: 99.61307, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ö‡∏∏‡∏©‡∏ö‡∏≤" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏≠‡∏£‡∏∏‡∏ì ‡∏°‡∏∞‡∏•‡∏¥‡πÅ‡∏Å‡πâ‡∏ß", address: "77-79", lat: 7.556399, lng: 99.60865, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ß‡∏±‡∏í‡∏ô‡∏≤" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏û‡∏• ‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡∏ß‡∏¥‡∏ä‡∏±‡∏¢", address: "127/3-4", lat: 7.556644, lng: 99.60914, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏£‡∏∑‡πà‡∏ô‡∏£‡∏°‡∏¢‡πå ‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ä‡∏¥‡∏ô‡∏ï‡∏≤ ‡∏°‡∏≤‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ï ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "5", lat: 7.556661, lng: 99.61663, type: "‡∏ó‡∏±‡∏Å‡∏©‡∏¥‡∏ì ‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏°‡∏ô‡∏ó‡πå" },
    { name: "‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏ü‡∏π ‡πÇ‡∏î‡∏¢ ‡∏ô‡∏≤‡∏¢‡∏ä‡∏±‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏∞", address: "33/89", lat: 7.556918, lng: 99.63093, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏ô‡∏´‡∏ô‡∏∏‡∏ô ‡πÄ‡∏£‡∏™‡∏ã‡∏¥‡πÄ‡∏î‡πâ‡∏ô‡∏ó‡πå" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏£‡∏≤‡∏ä‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "25", lat: 7.557488, lng: 99.6065, type: "‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏à‡∏±‡∏Å‡∏£‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏à‡∏£‡∏∏‡∏ç ‡πÅ‡∏™‡∏á‡πÅ‡∏à‡πâ‡∏ß", address: "65/50", lat: 7.55846, lng: 99.62594, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° S2S ‡∏Ñ‡∏ß‡∏µ‡∏ô‡∏™‡πå ‡∏ï‡∏£‡∏±‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "85", lat: 7.558571, lng: 99.60871, type: "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏£‡∏±‡∏á‡∏Ñ‡∏£‡∏¥‡∏™‡πÄ‡∏ï‡∏µ‡∏¢‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ó‡∏±‡∏Å‡∏©‡∏¥‡∏ì ‡∏™‡∏∏‡∏ò‡∏≤‡∏ó‡∏≠‡∏á‡πÑ‡∏ó‡∏¢", address: "25/30", lat: 7.558695, lng: 99.61644, type: "‡∏õ‡∏≤‡∏•‡πå‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏î ‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå" },
    { name: "‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ò‡∏¥‡πÅ‡∏´‡πà‡∏á‡∏™‡∏†‡∏≤‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡∏à‡∏±‡∏Å‡∏£‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢", address: "24", lat: 7.559318, lng: 99.60487, type: "‡∏≠‡∏¥‡∏ô‡∏ç‡∏≤‡∏ß‡∏±‡∏í‡∏ô‡πå ‡πÅ‡∏°‡∏ô‡∏ä‡∏±‡πà‡∏ô" },
    { name: "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏£‡∏±‡∏á‡∏Ñ‡∏£‡∏¥‡∏™‡πÄ‡∏ï‡∏µ‡∏¢‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤", address: "209", lat: 7.560322, lng: 99.59688, type: "‡∏ï‡∏£‡∏±‡∏á‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ó‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏õ‡∏¥‡πÇ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏° ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "221/12", lat: 7.560779, lng: 99.59442, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏≠‡∏¥‡∏™‡∏£‡∏∞" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ö‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏õ‡∏≠‡πÄ‡∏£‡∏ä‡∏±‡πà‡∏ô ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)", address: "6", lat: 7.561097, lng: 99.6061, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏Ñ‡∏≤‡∏•‡πÄ‡∏ó‡πá‡∏Å‡∏ã‡πå" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "69/8", lat: 7.561162, lng: 99.60372, type: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ï‡∏£‡∏±‡∏á‡∏£‡∏ß‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå (‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• TRPH)" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏™‡∏¥‡∏£‡∏¥‡∏ö‡∏£‡∏£‡∏ì‡∏ä‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡πÄ‡∏ã‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "42", lat: 7.561282, lng: 99.61585, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° S2S ‡∏Ñ‡∏ß‡∏µ‡∏ô‡∏™‡πå ‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏±‡∏¢ ‡∏°‡∏∞‡πÇ‡∏ô‡∏£‡∏°‡∏¢‡πå", address: "198", lat: 7.56144, lng: 99.59691, type: "‡∏î‡∏π‡∏™‡∏ö‡∏≤‡∏¢ 2020" },
    { name: "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏¥‡∏£‡∏¥‡∏Å‡∏∏‡∏• ‡πÅ‡∏Å‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á", address: "65/145", lat: 7.561833, lng: 99.60341, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏°‡∏≤‡∏¢‡πÄ‡∏Æ‡πâ‡∏≤‡∏™‡πå ‡∏Å‡∏≤‡∏£‡πå‡πÄ‡∏î‡∏ô‡∏ó‡πå ‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡∏≠‡∏£‡∏∏‡πÇ‡∏ì‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå", address: "139/9", lat: 7.562183, lng: 99.61385, type: "‡∏ß‡∏á‡πÅ‡∏Ç‡πÅ‡∏°‡∏ô‡∏ä‡∏±‡πà‡∏ô" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ê‡∏≤‡∏Å‡∏π‡∏£ ‡∏õ‡∏±‡∏Å‡∏õ‡∏¥‡πà‡∏ô‡πÄ‡∏û‡∏ä‡∏£", address: "175/1", lat: 7.562408, lng: 99.61478, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå" },
    { name: "‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå ‡∏†‡∏û‡∏ò‡∏£‡∏£‡∏°‡∏ß‡∏á‡∏®‡πå", address: "108/84", lat: 7.562811, lng: 99.60929, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏°‡∏≤‡∏¢‡πÄ‡∏ü‡∏£‡∏ô‡∏î‡πå" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ó‡∏±‡∏Å‡∏©‡∏¥‡∏ì‡∏ß‡∏á‡πÅ‡∏Ç‡πÅ‡∏•‡∏∞‡∏ö‡∏∏‡∏ï‡∏£ ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "187/2-3", lat: 7.563382, lng: 99.61723, type: "‡∏•‡∏µ‡∏°‡∏≤‡∏£‡πå‡∏ó ‡∏ä‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡πÄ‡∏ã‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå" },
    { name: "‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏ï‡∏£‡∏±‡∏á‡πÄ‡∏≠‡∏™‡πÄ‡∏Ñ‡∏ò‡∏ô‡∏≤‡∏ó‡∏¥‡∏û‡∏¢‡πå", address: "125", lat: 7.563463, lng: 99.6049, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏Ñ‡∏≤‡∏•‡πÄ‡∏ó‡πá‡∏Å‡∏ã‡πå" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÇ‡∏£‡∏ö‡∏¥‡∏ô‡∏™‡∏±‡∏ô ‡∏à‡∏≥‡∏Å‡∏±‡∏ô (‡∏°‡∏´‡∏≤‡∏ä‡∏ô) ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡∏£‡∏±‡∏á", address: "138", lat: 7.563498, lng: 99.62652, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÄ‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏©‡∏é‡∏≤" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏±‡∏í‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡∏ï‡∏£‡∏±‡∏á", address: "247/2", lat: 7.563865, lng: 99.61737, type: "‡∏´‡πâ‡∏≤‡∏á‡∏•‡∏µ‡∏°‡∏≤‡∏£‡πå‡∏ó ‡πÄ‡∏≠‡πä‡∏Å‡∏ã‡πå‡πÄ‡∏û‡∏£‡∏™" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏≠‡∏µ‡πÇ‡∏Ñ‡πà‡∏≠‡∏¥‡∏ô‡∏ô‡πå ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "131/9", lat: 7.564097, lng: 99.6033, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏õ‡∏≤‡∏•‡πå‡∏°‡∏°‡∏µ‡πà ‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ï‡∏£‡∏±‡∏á‡∏Ñ‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "235", lat: 7.564416, lng: 99.62128, type: "‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô ‡∏°‡∏≤‡∏ï‡∏µ‡πÇ‡∏ï‡πâ" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏ä‡∏•‡∏•‡πå‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "149", lat: 7.564563, lng: 99.60462, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏Ñ‡∏≤‡∏•‡πÄ‡∏ó‡πá‡∏Å‡∏ã‡πå" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏©‡∏é‡∏≤ ‡πÇ‡∏Æ‡πÄ‡∏ï‡πá‡∏• ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "188", lat: 7.564982, lng: 99.63128, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå ‡∏ò‡∏ô‡∏≤" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏£‡∏ä‡∏ï‡∏õ‡∏û‡∏ì ‡∏™‡∏≠‡∏á‡∏ô‡∏≤", address: "267/6", lat: 7.565509, lng: 99.62808, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ß‡∏±‡∏í‡∏ô‡∏≤‡∏û‡∏≤‡∏£‡πå‡∏Ñ" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ì‡∏£‡∏á‡∏Ñ‡πå ‡∏ö‡∏£‡∏£‡∏à‡∏á‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå", address: "45359", lat: 7.565666, lng: 99.62226, type: "‡∏Ñ‡∏∏‡πâ‡∏°‡πÇ‡∏à‡πÇ‡∏â" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏≠‡∏£‡∏∏‡∏ì ‡∏°‡∏∞‡∏•‡∏¥‡πÅ‡∏Å‡πâ‡∏ß", address: "45303", lat: 7.566051, lng: 99.61743, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏£‡∏±‡∏Å‡∏©‡πå‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå" },
    { name: "‡∏ô‡∏≤‡∏á‡∏•‡∏î‡∏≤‡∏ß‡∏±‡∏•‡∏¢‡πå ‡∏®‡∏±‡∏¢‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏û‡∏á‡∏©‡πå", address: "33/46", lat: 7.567627, lng: 99.62243, type: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏£‡∏≤‡∏ä‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏°‡∏á‡∏Ñ‡∏• ‡πÑ‡∏ó‡∏£‡∏á‡∏≤‡∏°", address: "20/2-20/7", lat: 7.568432, lng: 99.61523, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÄ‡∏î‡∏≠‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏ß‡∏π‡πâ‡∏î ‡∏ì ‡∏ï‡∏£‡∏±‡∏á ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏°‡∏¥‡∏£‡∏≤‡πÄ‡∏Ñ‡∏¥‡∏• ‡∏≠‡∏¥‡∏ô‡∏ô‡πå ‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ï‡∏£‡∏±‡∏á‡∏£‡∏ß‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå (‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• TRPH)", address: "61/39", lat: 7.56866, lng: 99.61957, type: "‡πÅ‡∏õ‡∏î‡∏´‡∏Å" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ä‡∏ß‡∏•‡∏¥‡∏ï ‡∏ß‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏£‡∏û‡∏á‡∏®‡πå", address: "65/51", lat: 7.568829, lng: 99.61071, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏£‡∏π‡∏ç‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡πÅ‡∏Å‡∏£‡∏ô‡∏î‡πå" },
    { name: "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ß‡∏¥‡∏ä‡∏ç‡∏≤ ‡∏à‡∏£‡∏π‡∏ç‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå", address: "69/99", lat: 7.569775, lng: 99.6085, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏®‡∏£‡∏µ‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡∏ô‡∏≤‡∏á‡∏•‡∏î‡∏≤‡∏ß‡∏±‡∏•‡∏¢‡πå ‡∏®‡∏±‡∏¢‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏û‡∏á‡∏©‡πå", address: "85/46", lat: 7.570278, lng: 99.61886, type: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏±‡∏í‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏ä‡∏°‡∏û‡∏π‡∏ô‡∏Ñ‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", address: "18/59", lat: 7.571623, lng: 99.61751, type: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 9 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ß‡∏±‡∏í‡∏ô‡∏≤ ‡∏û‡∏≤‡∏£‡πå‡∏Ñ ‡πÇ‡∏Æ‡πÄ‡∏ï‡πá‡∏•", address: "315/7", lat: 7.572562, lng: 99.60445, type: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" },
    { name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏õ‡∏¥‡πÇ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏°‡πÑ‡∏ó‡∏¢‡∏Ñ‡∏≠‡∏£‡πå‡∏õ‡∏≠‡πÄ‡∏£‡∏ä‡∏±‡πà‡∏ô ‡∏à‡∏≥‡∏Å‡∏±‡∏î", address: "327/4-5", lat: 7.572779, lng: 99.60574, type: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏Ñ‡∏≤‡∏•‡πÄ‡∏ó‡πá‡∏Å‡∏ã‡πå" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏™‡∏∏‡∏à‡∏¥‡∏ô‡∏ï‡πå ‡∏ä‡∏∏‡∏°‡πÄ‡∏û‡∏ä‡∏£", address: "45560", lat: 7.573442, lng: 99.61508, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ò‡∏ß‡∏±‡∏ä ‡πÇ‡∏û‡∏ò‡∏¥‡πå‡πÄ‡∏¢‡πá‡∏ô", address: "70/29", lat: 7.576015, lng: 99.61818, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ä‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏™‡∏ã‡∏¥‡πÄ‡∏î‡∏ô‡∏ã‡πå ‡∏ï‡∏£‡∏±‡∏á" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ò‡∏ß‡∏±‡∏ä ‡πÇ‡∏û‡∏ò‡∏¥‡πå‡πÄ‡∏¢‡πá‡∏ô", address: "70/28", lat: 7.576297, lng: 99.61892, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ä‡∏°‡∏û‡∏π‡∏ô‡∏Ñ‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå" },
    { name: "‡∏ô‡∏≤‡∏á‡∏•‡∏•‡∏¥‡∏ï‡∏≤ ‡∏ò‡∏£‡∏£‡∏°‡∏≤‡∏ß‡∏∏‡∏ò", address: "82/1", lat: 7.577716, lng: 99.62097, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° ‡∏ì ‡∏ó‡∏±‡∏ö‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á ‡∏ö‡∏π‡∏ï‡∏¥‡∏Ñ ‡∏£‡∏µ‡∏™‡∏≠‡∏£‡πå‡∏ó" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏ä‡∏≤‡∏ô‡∏ô‡∏ó‡πå ‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡∏£", address: "384/76", lat: 7.577826, lng: 99.60893, type: "‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡πà‡∏≤‡∏ß‡∏ó‡∏≠‡∏á" },
    { name: "‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏õ‡∏¥‡∏ä‡∏¢‡∏î‡∏≤‡∏õ‡∏¥‡πÇ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢‡∏°", address: "85", lat: 7.584404, lng: 99.63134, type: "‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô ‡∏°‡∏≤‡∏ï‡∏µ‡πÇ‡∏ï‡πâ" },
    { name: "‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏≤‡πÇ‡∏°‡∏ó‡∏¢‡πå ‡∏ä‡∏•‡∏ß‡∏¥‡∏®‡∏¥‡∏©‡∏®‡πå", address: "45379", lat: 7.570465, lng: 99.61209, type: "‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡πå (‡πÅ‡∏ú‡∏ô‡∏Å‡∏°‡∏±‡∏ò‡∏¢‡∏°) ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ï‡∏£‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" }
  ]

  // Maps
  const maps = []
  try {
    const usedBuildingControls = new Set()
    const usedRiskZones = new Set()
    const usedZoningPlans = new Set()
    const usedPlanProjects = new Set()
    const usedApprovedProjects = new Set()

    // Create maps from real Trang data
    for (let i = 0; i < realTrangData.length; i++) {
      const data = realTrangData[i]
      const mapType = faker.helpers.arrayElement(['buildingControl', 'riskZone', 'zoningPlan', 'planProject', 'approvedProject'])
      
      let mapData = {
        name_local: data.name,
        house_no: data.address,
        road: faker.location.street(),
        subdistrict: "‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á",
        district: "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ï‡∏£‡∏±‡∏á",
        province: "‡∏ï‡∏£‡∏±‡∏á",
        postcode: "92000",
        latitude: data.lat,
        longitude: data.lng,
      }

      // Add geometry data
  /*     if (Math.random() > 0.5) {
        mapData.data = makeSquarePolygon(data.lat, data.lng, faker.number.float({ min: 0.005, max: 0.02, fractionDigits: 5 }))
      } else {
        mapData.data = makeLineString(data.lat, data.lng, faker.number.int({ min: 3, max: 8 }))
      } */

      // Link to related data
      if (mapType === 'buildingControl') {
        const availableBCs = buildingControls.filter(bc => !usedBuildingControls.has(bc.id))
        if (availableBCs.length > 0) {
          const bc = faker.helpers.arrayElement(availableBCs)
          mapData.buildingControlId = bc.id
          usedBuildingControls.add(bc.id)
        }
      } else if (mapType === 'riskZone') {
        const availableRZs = riskZones.filter(rz => !usedRiskZones.has(rz.id))
        if (availableRZs.length > 0) {
          const rz = faker.helpers.arrayElement(availableRZs)
          mapData.riskZoneId = rz.id
          usedRiskZones.add(rz.id)
        }
      } else if (mapType === 'zoningPlan') {
        const availableZPs = zoningPlans.filter(zp => !usedZoningPlans.has(zp.id))
        if (availableZPs.length > 0) {
          const zp = faker.helpers.arrayElement(availableZPs)
          mapData.zoningPlanId = zp.id
          usedZoningPlans.add(zp.id)
        }
      }
      // planProject ‡πÅ‡∏•‡∏∞ approvedProject ‡πÑ‡∏°‡πà‡∏°‡∏µ relation ‡∏Å‡∏±‡∏ö Map ‡πÉ‡∏ô schema ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

      const map = await prisma.map.create({ data: mapData })
      maps.push(map)
    }

    console.log('‚úÖ Created maps')
  } catch (error) {
    console.log('‚ùå Error creating maps:', error.message)
    console.log('‚ö†Ô∏è Map table may not exist, skipping map creation...')
  }

  // ImageUploads - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô schema ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  // const imageUploads = []
  // for (let i = 0; i < 30; i++) {
  //   const map = faker.helpers.arrayElement(maps)
  //   const imageId = Date.now() + Math.random() + i
  //   const filename = `test-image-${imageId}.jpg`
  //   
  //   const imageUpload = await prisma.imageUpload.create({
  //     data: {
  //       filename,
  //       originalName: `test-image-${i + 1}.jpg`,
  //       path: `/uploads/images/${filename}`,
  //       url: `http://localhost:3002/uploads/images/${filename}`,
  //       size: faker.number.int({ min: 100000, max: 2000000 }),
  //       mimetype: 'image/jpeg',
  //       mapId: map.id,
  //       description: `‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${map.name_local}`
  //     }
  //   })
  //   imageUploads.push(imageUpload)
  // }

  // console.log('‚úÖ Created image uploads')

  // KmlData - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô schema ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  // const kmlData = []
  // for (let i = 0; i < 15; i++) {
  //   const map = faker.helpers.arrayElement(maps)
  //   const { lat, lng } = randomThaiCoord()
  //   
  //   // Create sample GeoJSON data
  //   const geojson = faker.helpers.arrayElement([
  //     makeSquarePolygon(lat, lng, faker.number.float({ min: 0.005, max: 0.02, fractionDigits: 5 })),
  //     makeLineString(lat, lng, faker.number.int({ min: 3, max: 8 }))
  //   ])
  //   
  //   const coordinates = []
  //   if (geojson.features[0].geometry.type === 'LineString') {
  //     coordinates.push(...geojson.features[0].geometry.coordinates)
  //   } else if (geojson.features[0].geometry.type === 'Polygon') {
  //     coordinates.push(...geojson.features[0].geometry.coordinates[0])
  //   }
  //   
  //   const bounds = coordinates.length > 0 ? {
  //     north: Math.max(...coordinates.map(c => c[1])),
  //     south: Math.min(...coordinates.map(c => c[1])),
  //     east: Math.max(...coordinates.map(c => c[0])),
  //     west: Math.min(...coordinates.map(c => c[0]))
  //   } : null

  //   const kml = await prisma.kmlData.create({
  //     data: {
  //       name: `KML Data ${i + 1}`,
  //       description: `KML data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${map.name_local}`,
  //       geojson: geojson,
  //       coordinates: coordinates,
  //       bounds: bounds,
  //       mapId: map.id
  //     }
  //   })
  //   kmlData.push(kml)
  // }

  // console.log('‚úÖ Created KML data')

  // WorkTopic
  try {
    const workTopics = [
      { title_work: '‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°', category: 'Environment' },
      { title_work: '‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á', category: 'Survey' },
      { title_work: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤', category: 'Planning' },
      { title_work: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', category: 'Monitoring' },
      { title_work: '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö', category: 'Assessment' }
    ]

    for (const topic of workTopics) {
      await prisma.workTopic.create({ data: topic })
    }

    console.log('‚úÖ Created work topics')
  } catch (error) {
    console.log('‚ö†Ô∏è WorkTopic table does not exist, skipping work topics creation...')
  }

  // Uploads
  for (let i = 0; i < 20; i++) {
    const relatedType = faker.helpers.arrayElement(['buildingControl', 'riskZone', 'zoningPlan'])
    const relatedId = faker.helpers.arrayElement(
      relatedType === 'buildingControl' ? buildingControls :
      relatedType === 'riskZone' ? riskZones : zoningPlans
    ).id

    await prisma.uploads.create({
      data: {
        namefile: faker.system.fileName({ extensionCount: 1 }),
        url: `https://example.com/uploads/${faker.system.fileName()}`,
        fileType: faker.helpers.arrayElement(['pdf', 'doc', 'docx', 'xlsx']),
        size: faker.number.int({ min: 50000, max: 5000000 }),
        ...(relatedType === 'buildingControl' ? { buildingControlId: relatedId } :
            relatedType === 'riskZone' ? { riskZoneId: relatedId } :
            { zoningPlanId: relatedId })
      }
    })
  }

  console.log('‚úÖ Created uploads')

  // Final statistics
  try {
    const totalUsers = await prisma.user.count()
    const totalOwners = await prisma.owner.count()
    const totalBuildingControls = await prisma.buildingControl.count()
    const totalRiskZones = await prisma.riskZone.count()
    const totalZoningPlans = await prisma.zoningPlan.count()
    const totalPlanProjects = await prisma.planProject.count()
    const totalApprovedProjects = await prisma.approvedProject.count()
    const totalMaps = await prisma.map.count()
    const totalUploads = await prisma.uploads.count()

    console.log('üìä Database seeded successfully!')
    console.log(`üë• Users: ${totalUsers}`)
    console.log(`üè† Owners: ${totalOwners}`)
    console.log(`üè¢ Building Controls: ${totalBuildingControls}`)
    console.log(`‚ö†Ô∏è Risk Zones: ${totalRiskZones}`)
    console.log(`üèòÔ∏è Zoning Plans: ${totalZoningPlans}`)
    console.log(`üìã Plan Projects: ${totalPlanProjects}`)
    console.log(`‚úÖ Approved Projects: ${totalApprovedProjects}`)
    console.log(`üó∫Ô∏è Maps: ${totalMaps}`)
    console.log(`üìÅ Uploads: ${totalUploads}`)
    
    // Test admin credentials
    console.log('\nüîê Test Admin Credentials:')
    console.log('Username: admin')
    console.log('Password: 12345')
    console.log('Email: admin@test.com')
  } catch (error) {
    console.log('‚ö†Ô∏è Error getting final statistics:', error.message)
    console.log('‚úÖ Database seeded successfully!')
    console.log('\nüîê Test Admin Credentials:')
    console.log('Username: admin')
    console.log('Password: 12345')
    console.log('Email: admin@test.com')
  }
}

main()
  .catch((e) => {
    console.error('‚ùå Error seeding database:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
