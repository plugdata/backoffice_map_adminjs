import React, { useEffect, useState } from "react"
import { useOwnerStore } from "./lib/ownerStore"
import { ApiClient } from "adminjs"

export default function CardOwner() {
  const ownerId = useOwnerStore((state) => state.ownerId)   // ‡πÑ‡∏î‡πâ ownerId ‡∏à‡∏≤‡∏Å store
  const [ownerData, setOwnerData] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  const api = new ApiClient()

  useEffect(() => {
    const fetchOwner = async () => {
      if (!ownerId) {
        setOwnerData(null)
        setLoading(false)
        return
      }

      try {
        setLoading(true)
        // ‚úÖ ‡∏î‡∏∂‡∏á owner record ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        const res = await api.recordAction({
          resourceId: "Owner",   // üëà resource ‡∏ó‡∏µ‡πà register ‡πÉ‡∏ô AdminJS
          recordId: ownerId,     // üëà ‡πÉ‡∏ä‡πâ record id
          actionName: "show",    // üëà action show
        })

        console.log("üîç owner record:", res?.data?.record)

        setOwnerData(res?.data?.record?.params || null)
      } catch (err) {
        console.error("‚ùå Fetch error:", err)
        setError(err)
      } finally {
        setLoading(false)
      }
    }

    fetchOwner()
  }, [ownerId])

  if (!ownerId) return <p className="text-gray-500">‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Owner ID</p>
  if (loading) return <p className="text-gray-500">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
  if (error) return <p className="text-red-500">‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</p>
  if (!ownerData) return <p className="text-gray-500">‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á</p>

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-bold border-b pb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á</h2>

      <Field
        label="‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
        value={`${ownerData.title_owner || ""} ${ownerData.first_name || ""} ${ownerData.last_name || ""}`.trim() || "‚Äî"}
      />

      <Field
        label="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô / ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
        value={`${ownerData.number_no || "‚Äî"} / ${ownerData.phone || "‚Äî"}`}
      />

      <Field
        label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
        value={[
          ownerData.no_id ? `‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${ownerData.no_id}` : null,
          ownerData.road ? `‡∏ñ‡∏ô‡∏ô ${ownerData.road}` : null,
          ownerData.subdistrict ? `‡∏ï‡∏≥‡∏ö‡∏• ${ownerData.subdistrict}` : null,
          ownerData.district ? `‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ${ownerData.district}` : null,
          ownerData.province ? `‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ${ownerData.province}` : null,
          ownerData.postcode ? `‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå ${ownerData.postcode}` : null,
        ]
          .filter(Boolean)
          .join(" ")}
      />

      <Field
        label="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"
        value={`${ownerData.org_name || "‚Äî"} ${ownerData.org_address || ""}`}
      />
    </div>
  )
}

/* Field Component */
function Field({ label, value }) {
  return (
    <div>
      <p className="text-sm text-gray-500">{label}</p>
      <p className="mt-1 text-base text-gray-800">
        {value && value.trim() !== "" ? value : "‚Äî"}
      </p>
    </div>
  )
}
