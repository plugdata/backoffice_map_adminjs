import React, { useState, useEffect } from 'react'
import { Box, H2, Text, Badge, Button, Table, TableHead, TableRow, TableBody, TableCell } from '@adminjs/design-system'

// Mock API Data
const mockStats = {
  totalDocuments: 156,
  pendingApproval: 23,
  approvedToday: 8,
  rejectedToday: 2,
  totalUsers: 45,
  activeUsers: 38
}

const mockNotifications = [
  {
    id: 1,
    type: 'document_approval',
    title: '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
    message: '‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ PR-2024-001 ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì',
    documentCode: 'PR-2024-001',
    createdAt: '2024-01-15T10:30:00Z',
    isRead: false
  },
  {
    id: 2,
    type: 'document_approved',
    title: '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
    message: '‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ PR-2024-002 ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
    documentCode: 'PR-2024-002',
    createdAt: '2024-01-15T09:15:00Z',
    isRead: true
  },
  {
    id: 3,
    type: 'document_rejected',
    title: '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
    message: '‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ PR-2024-003 ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
    documentCode: 'PR-2024-003',
    createdAt: '2024-01-15T08:45:00Z',
    isRead: false
  },
  {
    id: 4,
    type: 'system_alert',
    title: '‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
    message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 20 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2024 ‡πÄ‡∏ß‡∏•‡∏≤ 22:00-02:00',
    createdAt: '2024-01-15T08:00:00Z',
    isRead: true
  }
]

const mockDocuments = [
  {
    id: 1,
    documentCode: 'PR-2024-001',
    title: '‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
    department: 'IT',
    requester: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
    status: 'pending',
    createdAt: '2024-01-15T10:30:00Z',
    amount: 45000
  },
  {
    id: 2,
    documentCode: 'PR-2024-002',
    title: '‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
    department: 'HR',
    requester: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏î‡∏µ',
    status: 'approved',
    createdAt: '2024-01-15T09:15:00Z',
    amount: 15000
  },
  {
    id: 3,
    documentCode: 'PR-2024-003',
    title: '‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®',
    department: 'Finance',
    requester: '‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á',
    status: 'rejected',
    createdAt: '2024-01-15T08:45:00Z',
    amount: 25000
  },
  {
    id: 4,
    documentCode: 'PR-2024-004',
    title: '‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå',
    department: 'Marketing',
    requester: '‡∏™‡∏°‡∏õ‡∏≠‡∏á ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå',
    status: 'pending',
    createdAt: '2024-01-15T08:00:00Z',
    amount: 18000
  }
]

const notification = () => {
  const [stats, setStats] = useState(mockStats)
  const [notifications, setNotifications] = useState(mockNotifications)
  const [documents, setDocuments] = useState(mockDocuments)
  const [loading, setLoading] = useState(false)

  // Mock API calls
  const fetchStats = async () => {
    setLoading(true)
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500))
    setStats(mockStats)
    setLoading(false)
  }

  const fetchNotifications = async () => {
    setLoading(true)
    await new Promise(resolve => setTimeout(resolve, 300))
    setNotifications(mockNotifications)
    setLoading(false)
  }

  const fetchDocuments = async () => {
    setLoading(true)
    await new Promise(resolve => setTimeout(resolve, 400))
    setDocuments(mockDocuments)
    setLoading(false)
  }

  useEffect(() => {
    fetchStats()
    fetchNotifications()
    fetchDocuments()
  }, [])

  const getStatusBadge = (status) => {
    switch (status) {
      case 'pending':
        return <Badge variant="warning">‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</Badge>
      case 'approved':
        return <Badge variant="success">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</Badge>
      case 'rejected':
        return <Badge variant="danger">‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</Badge>
      default:
        return <Badge variant="default">{status}</Badge>
    }
  }

  const getNotificationIcon = (type) => {
    switch (type) {
      case 'document_approval':
        return 'üìã'
      case 'document_approved':
        return '‚úÖ'
      case 'document_rejected':
        return '‚ùå'
      case 'system_alert':
        return 'üîî'
      default:
        return 'üì¢'
    }
  }

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('th-TH', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('th-TH', {
      style: 'currency',
      currency: 'THB'
    }).format(amount)
  }

  return (
    <Box>
      {/* Header */}
     

      {/* Summary Statistics */}
      <Box mb="xl">
        <Box display="grid" gridTemplateColumns={['1fr', '1fr 1fr', '1fr 1fr 1fr', 'repeat(6, 1fr)']} gap="lg">
          <Box bg="white" p="lg" borderRadius="default" boxShadow="card">
            <Text fontSize="sm" fontWeight="bold" color="grey40" mb="sm">‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Text>
            <Text fontSize="xxl" fontWeight="bold" color="primary100">{stats.totalDocuments}</Text>
          </Box>
          
          <Box bg="white" p="lg" borderRadius="default" boxShadow="card">
            <Text fontSize="sm" fontWeight="bold" color="grey40" mb="sm">‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</Text>
            <Text fontSize="xxl" fontWeight="bold" color="warning">{stats.pendingApproval}</Text>
          </Box>
          
          <Box bg="white" p="lg" borderRadius="default" boxShadow="card">
            <Text fontSize="sm" fontWeight="bold" color="grey40" mb="sm">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</Text>
            <Text fontSize="xxl" fontWeight="bold" color="success">{stats.approvedToday}</Text>
          </Box>
          
          <Box bg="white" p="lg" borderRadius="default" boxShadow="card">
            <Text fontSize="sm" fontWeight="bold" color="grey40" mb="sm">‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</Text>
            <Text fontSize="xxl" fontWeight="bold" color="error">{stats.rejectedToday}</Text>
          </Box>
          
          <Box bg="white" p="lg" borderRadius="default" boxShadow="card">
            <Text fontSize="sm" fontWeight="bold" color="grey40" mb="sm">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Text>
            <Text fontSize="xxl" fontWeight="bold" color="info">{stats.totalUsers}</Text>
          </Box>
          
          <Box bg="white" p="lg" borderRadius="default" boxShadow="card">
            <Text fontSize="sm" fontWeight="bold" color="grey40" mb="sm">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</Text>
            <Text fontSize="xxl" fontWeight="bold" color="primary60">{stats.activeUsers}</Text>
          </Box>
        </Box>
      </Box>

      {/* Main Content Grid */}
      <Box display="grid" gridTemplateColumns={['1fr', '1fr 1fr']} gap="xl">
        {/* Notifications */}
        <Box bg="white" borderRadius="default" boxShadow="card">
          <Box p="lg" borderBottom="1px solid" borderColor="grey20">
            <H2>‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</H2>
            <Text fontSize="sm" color="grey40">‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ {formatDate(new Date())}</Text>
          </Box>
          
          <Box p="lg">
            {notifications.map((notification) => (
              <Box key={notification.id} mb="md" p="md" borderRadius="default" border="1px solid" borderColor={notification.isRead ? "grey20" : "primary20"} bg={notification.isRead ? "grey10" : "primary10"}>
                <Box display="flex" alignItems="flex-start" gap="md">
                  <Text fontSize="xl">{getNotificationIcon(notification.type)}</Text>
                  <Box flex={1}>
                    <Text fontWeight="bold" color={notification.isRead ? "grey70" : "primary100"}>
                      {notification.title}
                    </Text>
                    <Text fontSize="sm" color="grey60" mt="sm">
                      {notification.message}
                    </Text>
                    {notification.documentCode && (
                      <Box mt="sm">
                        <Badge variant="info">{notification.documentCode}</Badge>
                      </Box>
                    )}
                    <Text fontSize="xs" color="grey40" mt="sm">
                      {formatDate(notification.createdAt)}
                    </Text>
                  </Box>
                  {!notification.isRead && (
                    <Box width="12px" height="12px" bg="primary100" borderRadius="50%"></Box>
                  )}
                </Box>
              </Box>
            ))}
            
            <Button variant="primary" size="lg" width={1} mt="lg">
              ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </Button>
          </Box>
        </Box>

        {/* Recent Documents */}
        <Box bg="white" borderRadius="default" boxShadow="card">
          <Box p="lg" borderBottom="1px solid" borderColor="grey20">
            <H2>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</H2>
            <Text fontSize="sm" color="grey40">‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà</Text>
          </Box>
          
          <Box p="lg">
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</TableCell>
                  <TableCell>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</TableCell>
                  <TableCell>‡πÅ‡∏ú‡∏ô‡∏Å</TableCell>
                  <TableCell>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableCell>
                  <TableCell>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {documents.map((document) => (
                  <TableRow key={document.id}>
                    <TableCell>
                      <Text fontWeight="bold" color="primary100">{document.documentCode}</Text>
                    </TableCell>
                    <TableCell>
                      <Text fontWeight="bold">{document.title}</Text>
                      <Text fontSize="sm" color="grey40">{document.requester}</Text>
                    </TableCell>
                    <TableCell>
                      <Badge variant="default">{document.department}</Badge>
                    </TableCell>
                    <TableCell>
                      {getStatusBadge(document.status)}
                    </TableCell>
                    <TableCell>
                      <Text fontWeight="bold">{formatCurrency(document.amount)}</Text>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
            
            <Button variant="primary" size="lg" width={1} mt="lg">
              ‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </Button>
          </Box>
        </Box>
      </Box>

      {/* Quick Actions */}
  {/*     <Box mt="xl" bg="white" borderRadius="default" boxShadow="card" p="lg">
        <H3 mb="lg">‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡πà‡∏ß‡∏ô</H3>
        <Box display="flex" flexWrap="wrap" gap="md">
          <Button variant="primary">
            üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
          </Button>
          <Button variant="secondary">
            üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
          </Button>
          <Button variant="info">
            üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
          </Button>
          <Button variant="success">
            üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          </Button>
        </Box>
      </Box> */}
    </Box>
  )
}

export default notification
